* slang (stands for s-expression languange...)
** pre-requirements
- =llvm=. this project use llvm as compiler backend. 
- =stack=, to setup ghc, downloads all dependencies, build the compiler, etc.

#+BEGIN_SRC bash
# this will take a long time
# in my macbookpro(late 2015 i7, it takes about 1 hour
brew install llvm-hs/llvm/llvm-8 
# https://docs.haskellstack.org/en/stable/README/
curl -sSL https://get.haskellstack.org/ | sh 
#+END_SRC

** the compile process 

**.sl -> haskell-ast -> llvm ir -> all the format llvm supports

** how to run
#+BEGIN_SRC bash
  stack build
  stack install # after this step , stack will install slc to the bin path you configigured. (normally, it's ~/.local/bin/, make sure this is in your path config)
  slc sl-data/test.sl
  lli-8 sl-data/test.ll # if lli-8 don't exists, check the path and homebrew
#+END_SRC
you can always check the =*.ll= file for more compile details

** step one
- [X] finish simple s-expression parser
- [X] add arithmetic(such as =+=, =-=, =*=, =/=) support
  - run =/usr/local/Cellar/llvm-8/8.0.0/bin/lli-8 ./sl-data/test.ll= to see the return code...
  - use printf to show result of top level instuctions
  - currently only support int32 data type
- [X] compile to llvm

*** code count
$ cloc $(git ls-files)
      22 text files.
      22 unique files.
      10 files ignored.

github.com/AlDanial/cloc v 1.80  T=0.02 s (717.0 files/s, 22833.8 lines/s)

| Language     | files | blank | comment | code |
|--------------+-------+-------+---------+------|
| haskell      |     7 |    40 |       1 |  156 |
| assembly     |     3 |     5 |      12 |   67 |
| YAML         |     2 |    14 |      63 |   53 |
| Bourne Shell |     1 |     0 |       0 |    3 |
|--------------+-------+-------+---------+------|
| SUM:         |    13 |    59 |      76 |  279 |

** step two
- [X] add top level function define
- [-] add more primitive functions
  - [X] add print primitive
  - [ ] export more from stdio/libc
- [X] support if and recursive call
  - [X] support if
  - [X] support recursive call 
  - [X] impliment fib in =slang=
- [ ] fix bug about multiple =if= block 
- [ ] add =sli= support (repl)
- [ ] module and namespaces

** step three
- [ ] string const using intern symbol pool 
- [ ] add more control flow
- [ ] add more types, =double=, =char=, =bool=, =string=
- [ ] jit (mostly already supported by llvm)
- [ ] explore optimations supported by llvm

** step four
- [ ] experiment =type= system and other fantastical possibilities
- [ ] runtime system
- [ ] lock, thread, so on...
- [ ] network support

** step five
- [ ] gc...  
- [ ] coroutine
- [ ] continuation

Seems a long way to go

 *KEEP PLAYING! KEEP FIGHTING!*
  
